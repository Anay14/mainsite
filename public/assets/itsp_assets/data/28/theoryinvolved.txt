<h3>Artificial Intelligence</h3><p style="margin-left: 20px;">Heuristic Function (also called an Evaluation Function) is the scoring function that determines the score of a given state by using specific features of the state of the game. In our case of Connect-4, we have designed our heuristic function as follows:</p><p style="margin-left: 40px;">1. The heuristic function is proportional to the power of number of chips that are continuous in a row/column/diagonal. This is added up for every row,column and diagonal.</p><p style="margin-left: 40px;">2. The heuristic function gives a very high value(like INT_MAX) to 4 chips continuous in a row/column/diagonal.</p><p style="margin-left: 20px;">'Max' and 'Min' can be considered to be the two players of the game(considering two-player games only) . 'Max' will try to maximize the heuristic function at every Max move and 'Min' will try to minimize the heuristic at every Min move. </p><p style="margin-left: 20px;">MinMax (also known as minimax) algorithm is an algorithm that can be used to find the best possible move/action for each player(Min and Max). Further details about the MinMax Algorithm can be found at <a href="http://web.stanford.edu/~msirota/soco/minimax.html">http://web.stanford.edu/~msirota/soco/minimax.html</a> .</p><h3 style="margin-left: 20px;"></h3><p style="margin-left: 20px;">Alpha-Beta pruning is  a way of avoiding subtrees of searches which won't be selected. Further details can be found at <a href="http://cs.ucla.edu/~rosen/161/notes/alphabeta.html">http://cs.ucla.edu/~rosen/161/notes/alphabeta.html</a> .</p><p style="margin-left: 20px;">MinMax algorithm with alpha-beta pruning is used to get a depth of 10 (at reasonable speeds) for Connect4 game. </p><h3>Image Processing</h3><p style="margin-left: 20px;">OpenCV is used for Image Processing. </p><p style="margin-left: 20px;">VideoCapture() is used to get a continuous stream of the image (of the board) using laptop webcam. The computer waits until the state of the board is changed in order to trigger the AI. Once the AI code is run, the column number where the bot must make its move is fed to the Arduino through serial port communication. This triggers the arduino code and instructs the motors as described below.</p><h3>Electronic/Mechanics</h3><p style="margin-left: 20px;">A capacitor is used for stabilising the output of the Servo motor. </p><p style="margin-left: 20px;">The circuit used for the servo is <a target="_blank" href="http://www.stab-iitb.org/itsp/(%20Ref:https://learn.adafruit.com/adafruit-arduino-lesson-14-servo-motors/if-the-servo-misbehaves%20)">Servo Circuit</a> . A picture of our circuit :  ---</p><p style="margin-left: 20px;">( Ref:<a target="_blank" href="https://learn.adafruit.com/adafruit-arduino-lesson-14-servo-motors/if-the-servo-misbehaves">https://learn.adafruit.com/adafruit-arduino-lesson-14-servo-motors/if-the-servo-misbehaves</a> )</p><p style="margin-left: 20px;">The DC motor is run using L293D as the motor driver. </p><p style="margin-left: 20px;">The circuit used is again standard (only 1 motor used) : <a href="https://drive.google.com/file/d/0BxP5VcAKnPrGekFFUXFLdUszXzA/view?usp=sharing" target="_blank">DC Motor Circuit</a> . A picture of our circuit :  ---</p><p style="margin-left: 20px;">The header file &lt;Servo.h&gt; includes functions for controlling the Servo Motor. Servo motor is used for dispensing of coins. A DC motor is used for running a conveyor belt that holds the entire set up as below. The code first asks the DC Motor to rotate at a certain fixed speed for a fixed time (which is a function of the column number). Then the Servo motor is rotated by a fixed angle to drop the chip and rotated back to its initial position. Image Link: <a href="https://drive.google.com/file/d/0BxP5VcAKnPrGcFkyZHVxM0s0TEk/view?usp=sharing" target="_blank">Carrier + Servo</a></p>