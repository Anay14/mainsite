<p>There was a considerate amount of theory required for this project in the sense that one needed to have a good amount of knowledge about each of the modules we were using.</p><p>Following is the basic description of everything used in our project-</p><p><strong>Central Processor
Central Microcontroller ( ATmega2560 on Arduino Mega)-</strong></p><ul>
<li>Controls every other module . </li><li>It works on 16 MHz with instructions rate approaching 1 MIPS.</li><li>Here is link to the datasheet of ATmega2560 uC <a href="http://www.atmel.com/images/doc2549.pdf"> http://www.atmel.com/images/doc2549.pdf </a></li><li>Specification : 256Kbyte in system Flash , 8Kbyte RAM , 4x UART, 1x SPI, 1x I2C </li></ul><p><strong>Wiznet Ethernet Module-</strong></p><ul>
<li>Wiznet w5100 Ethernet module/chip has a on chip TCP/IP stack with IPv4 support.</li><li>It has all the TCP task management functions hardcoded on it. Giving easy access to internet embedded systems.</li><li>Physically connected to SPI port of the ATmega2560 with Chip Select pin as 10.</li><li>Managed by class ‘wiznet’ in ‘wiznet.h’.</li><li>Uses Arduino’s ‘Ethernet.h’ library. </li></ul><p><strong>RGB LED- </strong></p><ul>
<li>This LED indicates the status of a transaction.</li><li>In practice it can show variety of colors, but 3 colors are chosen according to the transaction result. </li><li>Transaction Successful: User Registered -&gt; GREEN </li><li>Transaction Successful: User Not Registered -&gt; RED </li><li>Transaction Failed : -&gt; BLUE </li><li>Colors can be changed for respective status in the software by function ‘set’ in ‘RGBLED’ class. </li><li>Physically connected to pins 5, 6, 7 corresponding to R, G, B.</li></ul><p><strong>LCD-</strong></p><ul><li>This shows the textual status of transaction when initiated, else by default shows current date and time.</li><li>Managed by class ‘LCD’ in ‘lcd.h’. Support for default LCD text is also added while displaying current date &amp; time.</li><li>Uses arduino’s ‘LiquidCrystal.h’ library for Hitachi HD44780 lcd displays</li><li>Has flexibility to choose any LCD size (currently used is 16 x 2).</li><li>Physically connected to pins from 22 to 28 on Arduino Mega.</li></ul><p><strong>BUZZER-</strong></p><ul>
<li>Gives the sonic indication to user about the result of a transaction process.</li><li>Programmed with 3 different kind of sounds for each type of transaction result , and one default for swipe.</li><li>Uses arduino’s function ’tone’ to generate frequency for specific duration of specified pin.</li><li>Physically connected to pin 13.</li></ul><p><strong>ID Reader- </strong></p><ul>
<li>This unit gets the device ID from the device ( although there is no physical layer externally ) this is on software level.</li><li>And managed by class ‘idClass’ in ‘id.h’.</li><li>Physically connected to Serial1 (or UART_1) and SENSOR_SELECT pin on 29.</li><li>SENSOR_SELECT pin decides which sensor to be used and is connected to the module boards for taking the desired input from sensor.</li><li>HIGH on this pin -&gt; RFID SENSOR</li><li>LOW on this pin -&gt; FINGERPRINT SENSOR</li></ul><p><strong>RFID-</strong></p><ul>
<li>RFID (Radio Frequency Identification) uses sensor EM-18 sensor for sensing 12 byte RFID sequence from a RFID tag.</li><li>In software, managed by class ‘RFID’</li></ul><p><strong>FINGERPRINT-</strong></p><ul>
<li>Fingerprint module uses sensor R305 to do all the task of registering/ checking/ deleting on the device.</li><li>A demo software to add/delete fingerprint is available on <a href="https://dl.dropboxusercontent.com/u/87066238/Sunrom-3935.zip"> https://dl.dropboxusercontent.com/u/87066238/Sunr...</a> from <a href="http://www.sunrom.com/p/finger-print-sensor-r305"> https://dl.dropboxusercontent.com/u/87066238/Sunr...</a></li><li>Storage capacity is 250 fingerprints.</li><li>For more info refer above link.</li><li>In software, managed by class fingerPrintClass.</li><li>Uses Arduino library ‘Adafruit_Fingerprint.h’ .</li></ul><p><strong>GPS-</strong></p><ul>
<li>GPS (Global Positioning System) is added to get the global position of the device( upto certain accuracy).</li><li>Uses GPS sensor SIM28 from SIMCOM.
 Managed by ‘GPSClass’ in ‘GPS_NMEA.h’.</li><li>Physically connected to Serial3 (or UART_3)
 Can work with any other GPS sensor which outputs a NMEA sequence 9600 bauds (default) without change in code.</li><li>Baud rate can be configured in ‘getLatLon’ function in ‘GPSClass’
o As Serial3.begin(_baud_rate_as_integer);</li></ul><p><strong>RTC-</strong></p><ul>
<li>RTC (Real Time Clock) is added to get real time from module</li><li>Uses DS1307 RTC chip from Dallas.</li><li>Accuracy in time keeping and drifting dependent on type of xtal used.</li><li>Managed by ‘timeClass’ in ‘time.h’ </li><li>Physically connected to SCL and SDA pins of ATmega2560.</li><li>Requires a Li-ion battery for backup power for DS1307.</li><li>Time can be set by altering configurations in ‘startupSet.php‘ while device power ups (or resets).</li></ul>